generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessRequest {
  id          String   @id @default(cuid())
  email       String
  phone       String
  code        String
  verified    Boolean  @default(false)
  validUntil  DateTime?
  createdAt   DateTime @default(now())

  @@index([email])
}

model FooterSettings {
  id             String   @id @default(cuid())
  companyName    String
  description    String
  phone          String
  email          String
  address        String

  facebookUrl    String
  instagramUrl   String
  linkedinUrl    String

  copyrightText  String
  developerName  String
  developerUrl   String

  updatedAt      DateTime @updatedAt
}

model NavigationSettings {
  id           String   @id @default(cuid())
  logoAlt      String
  logoUrl      String?
  phone        String
  securityText String
  menuItems    Json
  dropdownItems Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Slide {
  id          String   @id @default(cuid())
  title       String
  subtitle    String
  description String
  buttonText  String
  buttonLink  String
  imageUrl    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FirstSection {
  id              String   @id @default(cuid())
  backgroundImage String
  headline        String
  buttonText      String
  buttonLink      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SecondSection {
  id        String   @id @default(cuid())
  heading   String
  imageUrl  String
  reasons   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThirdSection {
  id         String   @id @default("third-section")
  heading    String
  subheading String
  imageUrl   String?
  services   String[]
}

model Agent {
  id        String         @id @default(cuid())
  clerkId   String?   @unique
  firstName String?
  lastName  String?
  name      String?
  email     String?
  title     String?
  phone     String?
  image     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  reviews   AgentReview[]
  properties Property[]

  @@unique([name, phone], name: "name_phone")
}

model AgentReview {
  id        String   @id @default(cuid())
  content   String
  author    String
  rating    Int      @default(5)
  imageUrl  String?
  agentId   String
  createdAt DateTime @default(now())

  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  message   String
  rating    Int
  language  String   @default("lv")
  createdAt DateTime @default(now())
}

model SixthSection {
  id          String   @id @default(cuid())
  title       String
  buttonText  String
  buttonLink  String
  imageUrl    String
  updatedAt   DateTime @updatedAt
}

model SevenSection {
  id          String   @id @default(cuid())
  title       String
  buttonText  String
  buttonLink  String
  imageUrl    String
  updatedAt   DateTime @updatedAt
}

model SoldProperty {
  id          String   @id @default(cuid())
  title       String
  price       String
  status      String
  imageUrls   String[]
  size        String
  series      String
  floor       String
  description String
  link        String
  createdAt   DateTime @default(now())
}

model WhyChooseUs {
  id          String   @id @default(cuid())
  title       String
  buttonText  String
  buttonUrl   String?
  points      String[]
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Statistic {
  id          String   @id @default(uuid())
  icon        String
  value       String
  description String
  order       Int      @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PartnersSection {
  id        String   @id @default("partners-section")
  title     String
  subtitle  String
  partners  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(uuid())
  title     String
  date      String
  excerpt   String
  shortDescription String?
  slug      String   @unique
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactSettings {
  id        String   @id @default("contact-section")
  heading   String
  subtext   String
  address   String
  phone     String
  email     String
  hours     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image      String?
  isVisible   Boolean    @default(true)
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  properties  Property[]
}

model Property {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  price        Int      
  currency     String   @default("EUR")
  
  address      String
  city         String
  district     String?
  
  rooms        Int?
  area         Float?
  floor        Int?
  totalFloors  Int?
  
  categoryId   String
  category     PropertyCategory @relation(fields: [categoryId], references: [id])
  
  mainImage    String?
  images       String[]

  videoUrl     String?
  
  status       PropertyStatus @default(AVAILABLE)
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  
  propertyViews PropertyView[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  propertyProject String?

  series       String?
  hasElevator  Boolean?
  amenities    String[]


  agentId   String?
  agent     Agent?   @relation(fields: [agentId], references: [id])

  @@index([categoryId])
  @@index([status])
  @@index([isActive])
  @@index([isFeatured])
}

enum PropertyStatus {
  AVAILABLE
  RESERVED
  SOLD
  RENTED
  UNAVAILABLE
}

model PropertyView {
  id         String   @id @default(cuid())
  propertyId String
  ipAddress  String
  userAgent  String?
  createdAt  DateTime @default(now())

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, ipAddress], name: "unique_property_view")
  @@index([propertyId])
  @@index([ipAddress])
}

model Content {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  excerpt         String      @db.Text
  content         String      @db.Text
  type            ContentType
  published       Boolean     @default(false)
  publishedAt     DateTime?

  featuredImage   String?
  videoUrl        String?
  videoFile       String?
  images          String[]
  
  tags            String[]
  author          String?
  metaTitle       String?
  metaDescription String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([type])
  @@index([published])
  @@index([publishedAt])
  @@index([slug])
}

enum ContentType {
  EDUCATIONAL
  VILLAGES
}

model Translation {
  id        String   @id @default(cuid())
  key       String
  locale    String
  value     String
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, locale], name: "unique_translation")
  @@index([locale])
  @@index([category])
}
